"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIframeWindow = exports.isDocumentElement = exports.getDocumentElement = exports.isNodeEqual = exports.isDomElement = exports.getScrollingElement = exports.isBodyElement = exports.isHtmlElement = exports.findIframeByWindow = exports.getIFrameByIndex = exports.getIframeByElement = void 0;
const execution_context_1 = __importDefault(require("../execution-context"));
const index_1 = require("./index");
const clientsManager = __importStar(require("../clients-manager"));
async function getIframeByElement({ objectId }) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function () {
            return this.ownerDocument.defaultView.frameElement
        }`,
        objectId,
    });
    if (frame.result.value !== null)
        return index_1.describeNode(DOM, frame.result.objectId || '');
    return null;
}
exports.getIframeByElement = getIframeByElement;
async function getIFrameByIndex(objectId, index) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function (index) {
                return this[index];
            }`,
        objectId: objectId,
        arguments: [{ value: index }],
    });
    const frameObjectId = frame.result.objectId;
    if (frameObjectId)
        return index_1.describeNode(DOM, frameObjectId);
    return null;
}
exports.getIFrameByIndex = getIFrameByIndex;
async function findIframeByWindow(context) {
    const { Runtime } = clientsManager.getClient();
    const expression = `
        (function findIframes(parentDocument, result = []) {
            if (!parentDocument)
                return [];
        
            const children = parentDocument.querySelectorAll('iframe');
        
            for (const child of children) {
                result.push(child, ...findIframes(child.contentDocument));
            }
        
            return result;
        })(document);
   `;
    const frames = await Runtime.evaluate({ expression });
    let index = 0;
    let frame = await getIFrameByIndex(frames.result.objectId, index);
    while (frame) {
        if (context.frameId === frame.frameId)
            return frame;
        index++;
        frame = await getIFrameByIndex(frames.result.objectId, index);
    }
    return null;
}
exports.findIframeByWindow = findIframeByWindow;
function hasTagName(node, tagName) {
    return node.nodeName.toLowerCase() === tagName.toLowerCase();
}
function isHtmlElement(node) {
    return hasTagName(node, 'html');
}
exports.isHtmlElement = isHtmlElement;
function isBodyElement(node) {
    return hasTagName(node, 'body');
}
exports.isBodyElement = isBodyElement;
async function getScrollingElement(node) {
    const client = clientsManager.getClient();
    const args = {
        functionDeclaration: `function () {
            const doc = this !== window ? this.ownerDocument : document;
            
            return doc.scrollingElement;
        }`,
    };
    if (node)
        args.objectId = node.objectId;
    else
        args.executionContextId = execution_context_1.default.top.ctxId;
    const { result } = await client.Runtime.callFunctionOn(args);
    return index_1.describeNode(client.DOM, result.objectId || '');
}
exports.getScrollingElement = getScrollingElement;
function isDomElement(node) {
    return node.nodeType === 1;
}
exports.isDomElement = isDomElement;
function isNodeEqual(el1, el2) {
    return el1.backendNodeId === el2.backendNodeId;
}
exports.isNodeEqual = isNodeEqual;
async function getDocumentElement(win) {
    const { Runtime, DOM } = clientsManager.getClient();
    const { exceptionDetails, result: resultObj } = await Runtime.evaluate({
        expression: 'document.documentElement',
        contextId: win.ctxId,
    });
    if (exceptionDetails)
        throw exceptionDetails;
    return index_1.describeNode(DOM, resultObj.value.objectId);
}
exports.getDocumentElement = getDocumentElement;
async function isDocumentElement(el) {
    const docEl = await getDocumentElement(execution_context_1.default.current);
    return isNodeEqual(el, docEl);
}
exports.isDocumentElement = isDocumentElement;
async function isIframeWindow() {
    return false;
}
exports.isIframeWindow = isIframeWindow;
//# sourceMappingURL=data:application/json;base64,
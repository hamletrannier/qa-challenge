"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserClient = void 0;
// NOTE: Initializer should be the first
require("./shared-adapter-initializer");
const read_file_relative_1 = require("read-file-relative");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const debug_1 = __importDefault(require("debug"));
const client_functions_1 = require("../../../../utils/client-functions");
const warning_message_1 = __importDefault(require("../../../../../../notifications/warning-message"));
const SharedErrors = __importStar(require("../../../../../../shared/errors"));
const pretty_hrtime_1 = __importDefault(require("pretty-hrtime"));
const elapsed_upperbounds_1 = require("../elapsed-upperbounds");
const guard_time_execution_1 = __importDefault(require("../../../../../../utils/guard-time-execution"));
const client_function_executor_1 = __importDefault(require("./client-function-executor"));
const execution_context_1 = __importDefault(require("./execution-context"));
const clientsManager = __importStar(require("./clients-manager"));
const DEBUG_SCOPE = (id) => `testcafe:browser:provider:built-in:chrome:browser-client:${id}`;
const DOWNLOADS_DIR = path_1.default.join(os_1.default.homedir(), 'Downloads');
const debugLog = debug_1.default('testcafe:browser:provider:built-in:dedicated:chrome');
class BrowserClient {
    constructor(runtimeInfo, proxyless) {
        this._clients = {};
        this._runtimeInfo = runtimeInfo;
        this.debugLogger = debug_1.default(DEBUG_SCOPE(runtimeInfo.browserId));
        this._proxyless = proxyless;
        this._clientFunctionExecutor = new client_function_executor_1.default();
        runtimeInfo.browserClient = this;
    }
    get _clientKey() {
        return this._runtimeInfo.activeWindowId || this._runtimeInfo.browserId;
    }
    get _config() {
        return this._runtimeInfo.config;
    }
    async _getTabs() {
        const tabs = await chrome_remote_interface_1.default.List({ port: this._runtimeInfo.cdpPort });
        return tabs.filter(t => t.type === 'page');
    }
    async _getActiveTab() {
        let tabs = await this._getTabs();
        if (this._runtimeInfo.activeWindowId)
            tabs = tabs.filter(t => t.title.includes(this._runtimeInfo.activeWindowId));
        return tabs[0];
    }
    _checkDropOfPerformance(method, elapsedTime) {
        this.debugLogger(`CDP method '${method}' took ${pretty_hrtime_1.default(elapsedTime)}`);
        const [elapsedSeconds] = elapsedTime;
        if (elapsedSeconds > elapsed_upperbounds_1.ELAPSED_TIME_UPPERBOUNDS[method]) {
            this._runtimeInfo.providerMethods.reportWarning(warning_message_1.default.browserProviderDropOfPerformance, this._runtimeInfo.browserName);
        }
    }
    async _createClient() {
        const target = await this._getActiveTab();
        const client = await chrome_remote_interface_1.default({ target, port: this._runtimeInfo.cdpPort });
        const { Page, Network, Runtime } = client;
        this._clients[this._clientKey] = client;
        await guard_time_execution_1.default(async () => await Page.enable(), elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.PageEnable, elapsedTime));
        await Network.enable({});
        await Runtime.enable();
        return client;
    }
    async _setupClient(client) {
        if (this._config.emulation)
            await this._setEmulation(client);
        if (this._config.headless)
            await this._setupDownloads(client);
    }
    async _setDeviceMetricsOverride(client, width, height, deviceScaleFactor, mobile) {
        await guard_time_execution_1.default(async () => {
            await client.Emulation.setDeviceMetricsOverride({
                width,
                height,
                deviceScaleFactor,
                mobile,
                // @ts-ignore
                fitWindow: false,
            });
        }, elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.SetDeviceMetricsOverride, elapsedTime));
    }
    async _setUserAgentEmulation(client) {
        if (this._config.userAgent === void 0)
            return;
        await client.Network.setUserAgentOverride({ userAgent: this._config.userAgent });
    }
    async _setTouchEmulation(client) {
        if (this._config.touch === void 0)
            return;
        const touchConfig = {
            enabled: this._config.touch,
            configuration: this._config.mobile ? 'mobile' : 'desktop',
            maxTouchPoints: 1,
        };
        if (client.Emulation.setEmitTouchEventsForMouse)
            await client.Emulation.setEmitTouchEventsForMouse(touchConfig);
        if (client.Emulation.setTouchEmulationEnabled)
            await client.Emulation.setTouchEmulationEnabled(touchConfig);
    }
    async _setEmulation(client) {
        await this._setUserAgentEmulation(client);
        await this._setTouchEmulation(client);
        await this.resizeWindow({
            width: this._config.width,
            height: this._config.height,
        });
    }
    async _setupDownloads(client) {
        await client.Page.setDownloadBehavior({
            behavior: 'allow',
            downloadPath: DOWNLOADS_DIR,
        });
    }
    async _evaluateRuntime(client, expression, returnByValue = false) {
        return client.Runtime.evaluate({ expression, returnByValue });
    }
    async _calculateEmulatedDevicePixelRatio(client) {
        if (!client)
            return;
        const devicePixelRatioQueryResult = await client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });
        this._runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
        this._runtimeInfo.emulatedDevicePixelRatio = this._config.scaleFactor || this._runtimeInfo.originalDevicePixelRatio;
    }
    static async _injectProxylessStuff(client) {
        const script = read_file_relative_1.readSync('../../../../../../../lib/client/proxyless/index.js');
        await client.Page.addScriptToEvaluateOnNewDocument({
            source: script,
        });
    }
    async resizeWindow(newDimensions) {
        const { browserId, config, viewportSize, providerMethods, emulatedDevicePixelRatio } = this._runtimeInfo;
        const currentWidth = viewportSize.width;
        const currentHeight = viewportSize.height;
        const newWidth = newDimensions.width || currentWidth;
        const newHeight = newDimensions.height || currentHeight;
        if (!config.headless)
            await providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);
        viewportSize.width = newWidth;
        viewportSize.height = newHeight;
        const client = await this.getActiveClient();
        if (client && config.emulation) {
            await this._setDeviceMetricsOverride(client, viewportSize.width, viewportSize.height, emulatedDevicePixelRatio, config.mobile);
            await guard_time_execution_1.default(async () => {
                await client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
            }, elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.SetVisibleSize, elapsedTime));
        }
    }
    isHeadlessTab() {
        return !!this._parentTarget && this._config.headless;
    }
    async getActiveClient() {
        try {
            if (!this._clients[this._clientKey])
                this._clients[this._clientKey] = await this._createClient();
        }
        catch (err) {
            debugLog(err);
            return void 0;
        }
        return this._clients[this._clientKey];
    }
    async init() {
        try {
            const tabs = await this._getTabs();
            this._parentTarget = tabs.find(t => t.url.includes(this._runtimeInfo.browserId));
            if (!this._parentTarget)
                return;
            const client = await this.getActiveClient();
            if (client) {
                await this._calculateEmulatedDevicePixelRatio(client);
                await this._setupClient(client);
                if (this._proxyless) {
                    await BrowserClient._injectProxylessStuff(client);
                    execution_context_1.default.initialize(client);
                    clientsManager.setClient(client);
                }
            }
        }
        catch (e) {
            return;
        }
    }
    async getScreenshotData(fullPage) {
        let viewportWidth = 0;
        let viewportHeight = 0;
        const { config, emulatedDevicePixelRatio } = this._runtimeInfo;
        const client = await this.getActiveClient();
        if (!client)
            return Buffer.alloc(0);
        if (fullPage) {
            const { contentSize, visualViewport } = await client.Page.getLayoutMetrics();
            await this._setDeviceMetricsOverride(client, Math.ceil(contentSize.width), Math.ceil(contentSize.height), emulatedDevicePixelRatio, config.mobile);
            viewportWidth = visualViewport.clientWidth;
            viewportHeight = visualViewport.clientHeight;
        }
        const screenshotData = await client.Page.captureScreenshot({});
        if (fullPage) {
            if (config.emulation) {
                await this._setDeviceMetricsOverride(client, config.width || viewportWidth, config.height || viewportHeight, emulatedDevicePixelRatio, config.mobile);
            }
            else
                await client.Emulation.clearDeviceMetricsOverride();
        }
        return Buffer.from(screenshotData.data, 'base64');
    }
    async closeTab() {
        if (this._parentTarget)
            await chrome_remote_interface_1.default.Close({ id: this._parentTarget.id, port: this._runtimeInfo.cdpPort });
    }
    async updateMobileViewportSize() {
        const client = await this.getActiveClient();
        if (!client)
            return;
        const windowDimensionsQueryResult = await this._evaluateRuntime(client, `(${client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`, true);
        const windowDimensions = windowDimensionsQueryResult.result.value;
        this._runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
        this._runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
    }
    async executeClientFunction(command, callsite) {
        const client = await this.getActiveClient();
        if (!client)
            throw new Error('Cannot get the active browser client');
        return this._clientFunctionExecutor.executeClientFunction(client.Runtime, command, callsite);
    }
    async executeSelector(command, callsite, selectorTimeout) {
        const client = await this.getActiveClient();
        if (!client)
            throw new Error('Cannot get the active browser client');
        return this._clientFunctionExecutor.executeSelector({
            Runtime: client.Runtime,
            errCtors: {
                notFound: SharedErrors.CannotObtainInfoForElementSpecifiedBySelectorError.name,
                invisible: SharedErrors.CannotObtainInfoForElementSpecifiedBySelectorError.name,
            },
            command, callsite, selectorTimeout,
        });
    }
    async switchToIframe(command, callsite, selectorTimeout) {
        const client = await this.getActiveClient();
        if (!client)
            return;
        const selector = command.selector;
        if (typeof selector.timeout === 'number')
            selectorTimeout = selector.timeout;
        selector.needError = true;
        const node = await this._clientFunctionExecutor.getNode({
            DOM: client.DOM,
            Runtime: client.Runtime,
            command: selector,
            errCtors: {
                notFound: SharedErrors.ActionElementNotFoundError.name,
                invisible: SharedErrors.ActionElementIsInvisibleError.name,
            },
            callsite, selectorTimeout,
        });
        if (!node.frameId)
            throw new SharedErrors.ActionElementNotIframeError(callsite);
        execution_context_1.default.switchToIframe(node.frameId);
    }
    switchToMainWindow() {
        execution_context_1.default.switchToMainWindow();
    }
}
exports.BrowserClient = BrowserClient;
//# sourceMappingURL=data:application/json;base64,
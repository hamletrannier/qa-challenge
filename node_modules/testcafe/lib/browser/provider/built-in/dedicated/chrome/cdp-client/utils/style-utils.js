"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentScroll = exports.getWindowDimensions = exports.getElementScroll = exports.getElementPadding = exports.getBordersWidth = exports.getClientDimensions = exports.getBoxModel = exports.getScroll = exports.getProperties = exports.getStyleProperties = void 0;
const boundary_values_1 = __importDefault(require("../../../../../../../shared/utils/values/boundary-values"));
const dom_utils_1 = require("./dom-utils");
const clientsManager = __importStar(require("../clients-manager"));
async function getPadding(node) {
    const client = clientsManager.getClient();
    const { nodeId } = await client.DOM.requestNode(node);
    const style = await getStyleProperties(nodeId, 'padding-right', 'padding-bottom', 'padding-left', 'padding-top');
    const right = parseInt(style['padding-right'], 10);
    const bottom = parseInt(style['padding-bottom'], 10);
    const left = parseInt(style['padding-left'], 10);
    const top = parseInt(style['padding-top'], 10);
    return new boundary_values_1.default(top, right, bottom, left);
}
async function getStyleProperties(nodeId, ...names) {
    const { CSS } = clientsManager.getClient();
    const properties = {};
    const style = await CSS.getComputedStyleForNode({ nodeId });
    style.computedStyle.filter(property => names.includes(property.name))
        .forEach(property => {
        properties[property.name] = property.value;
    });
    return properties;
}
exports.getStyleProperties = getStyleProperties;
async function getProperties(node, ...names) {
    const { Runtime } = clientsManager.getClient();
    const properties = {};
    const { result } = await Runtime.getProperties(node);
    result.filter(property => names.includes(property.name))
        .forEach(property => {
        var _a;
        properties[property.name] = (_a = property.value) === null || _a === void 0 ? void 0 : _a.value;
    });
    return properties;
}
exports.getProperties = getProperties;
async function getScroll(node) {
    const { scrollLeft, scrollTop } = await getProperties(node, 'scrollLeft', 'scrollTop');
    return { left: Number(scrollLeft), top: Number(scrollTop) };
}
exports.getScroll = getScroll;
async function getBoxModel(node) {
    const { DOM } = clientsManager.getClient();
    const boxModel = await DOM.getBoxModel({ objectId: node.objectId });
    return boxModel.model;
}
exports.getBoxModel = getBoxModel;
async function getElementDimensions(node) {
    // NOTE: for some reason this method call is required for CSS.getComputedStyleForNode
    // TODO: remove this line after the problem is clear
    await clientsManager.getClient().DOM.getDocument({});
    const boxModel = await getBoxModel(node);
    const scroll = await getScroll(node);
    const paddings = await getPadding(node);
    const { width, height, border, padding, content } = boxModel;
    const left = Math.round(border[0]);
    const top = border[1];
    const bottom = top + height;
    const right = left + width;
    const borders = {
        top: padding[1] - border[1],
        right: border[4] - padding[4],
        bottom: border[5] - padding[5],
        left: padding[0] - border[0],
    };
    const scrollbar = {
        right: Math.round(padding[2] - content[2] - paddings.right),
        bottom: Math.round(padding[7] - content[7] - paddings.bottom),
    };
    return {
        border: borders,
        bottom,
        height,
        left,
        right,
        scroll: {
            left: Math.round(Number(scroll.left)),
            top: Math.round(Number(scroll.top)),
        },
        scrollbar,
        paddings,
        top,
        width,
    };
}
async function getClientDimensions(node) {
    const elementDimensions = await getElementDimensions(node);
    const parentFrame = await dom_utils_1.getIframeByElement(node);
    if (parentFrame) {
        const frameBoxModel = await getBoxModel(parentFrame);
        elementDimensions.left -= frameBoxModel.content[0];
        elementDimensions.top -= frameBoxModel.content[1];
        elementDimensions.bottom -= frameBoxModel.content[1];
        elementDimensions.right -= frameBoxModel.content[0];
    }
    return elementDimensions;
}
exports.getClientDimensions = getClientDimensions;
async function getBordersWidth(node) {
    const dimensions = await getElementDimensions(node);
    return dimensions.border;
}
exports.getBordersWidth = getBordersWidth;
async function getElementPadding(node) {
    return getPadding(node);
}
exports.getElementPadding = getElementPadding;
async function getElementScroll(node) {
    return getScroll(node);
}
exports.getElementScroll = getElementScroll;
async function getWindowDimensions(executionContext) {
    const { Runtime } = clientsManager.getClient();
    const args = {
        expression: `({
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight
        })`,
        returnByValue: true,
    };
    if (executionContext)
        args.contextId = executionContext.ctxId;
    const { result } = await Runtime.evaluate(args);
    const { width, height } = result.value;
    return new boundary_values_1.default(0, width, height, 0);
}
exports.getWindowDimensions = getWindowDimensions;
async function getDocumentScroll(node) {
    const document = await dom_utils_1.getScrollingElement(node);
    return getElementScroll(document);
}
exports.getDocumentScroll = getDocumentScroll;
//# sourceMappingURL=data:application/json;base64,
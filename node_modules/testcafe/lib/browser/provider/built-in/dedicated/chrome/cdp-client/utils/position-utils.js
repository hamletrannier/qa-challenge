"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWindowPosition = exports.getElementFromPoint = exports.getIframePointRelativeToParentFrame = exports.getIframeClientCoordinates = exports.containsOffset = exports.getOffsetPosition = exports.getClientPosition = void 0;
const axis_values_1 = __importDefault(require("../../../../../../../shared/utils/values/axis-values"));
const boundary_values_1 = __importDefault(require("../../../../../../../shared/utils/values/boundary-values"));
const dom_utils_1 = require("./dom-utils");
const clientsManager = __importStar(require("../clients-manager"));
const style_utils_1 = require("./style-utils");
async function getClientPosition(node) {
    const boxModel = await style_utils_1.getBoxModel(node);
    return new axis_values_1.default(boxModel.border[0], boxModel.border[1]);
}
exports.getClientPosition = getClientPosition;
async function getOffsetPosition(node) {
    const dimensions = await style_utils_1.getClientDimensions(node);
    const { left, top } = await style_utils_1.getDocumentScroll(node);
    return { left: dimensions.left + left, top: dimensions.top + top };
}
exports.getOffsetPosition = getOffsetPosition;
async function containsOffset(node, offsetX, offsetY) {
    const dimensions = await style_utils_1.getClientDimensions(node);
    const properties = await style_utils_1.getProperties(node, 'scrollWidth', 'scrollHeight');
    const width = Math.max(Number(properties.scrollWidth), dimensions.width);
    const height = Math.max(Number(properties.scrollHeight), dimensions.height);
    const maxX = dimensions.scrollbar.right + dimensions.border.left + dimensions.border.right + width;
    const maxY = dimensions.scrollbar.bottom + dimensions.border.top + dimensions.border.bottom + height;
    return (typeof offsetX === 'undefined' || offsetX >= 0 && maxX >= offsetX) &&
        (typeof offsetY === 'undefined' || offsetY >= 0 && maxY >= offsetY);
}
exports.containsOffset = containsOffset;
async function getIframeClientCoordinates(node) {
    const dimensions = await style_utils_1.getClientDimensions(node);
    const [left, top, right, bottom] = [
        dimensions.left + dimensions.border.left + dimensions.paddings.left,
        dimensions.top + dimensions.border.top + dimensions.paddings.left,
        dimensions.right - dimensions.border.right - dimensions.paddings.right,
        dimensions.bottom - dimensions.border.bottom - dimensions.paddings.bottom,
    ];
    return new boundary_values_1.default(top, right, bottom, left);
}
exports.getIframeClientCoordinates = getIframeClientCoordinates;
async function getIframePointRelativeToParentFrame(iframePoint, context) {
    const iframe = await dom_utils_1.findIframeByWindow(context);
    if (!iframe)
        return null;
    const dimensions = await style_utils_1.getClientDimensions(iframe);
    const paddings = await style_utils_1.getElementPadding(iframe);
    const left = dimensions.left + dimensions.border.left + paddings.left + iframePoint.x;
    const top = dimensions.top + dimensions.border.top + paddings.top + iframePoint.y;
    return new axis_values_1.default(left, top);
}
exports.getIframePointRelativeToParentFrame = getIframePointRelativeToParentFrame;
async function getElementFromPoint(point) {
    const { DOM } = clientsManager.getClient();
    try {
        const { backendNodeId } = await DOM.getNodeForLocation({ x: point.x, y: point.y });
        return DOM.resolveNode({ backendNodeId });
    }
    catch (_a) {
        // NOTE: TODO: for some reason this methods throws error for correct `point` values
        // always throws error for negative values
    }
    return null;
}
exports.getElementFromPoint = getElementFromPoint;
async function getWindowPosition() {
    const { Runtime } = clientsManager.getClient();
    const args = {
        expression: `({
            x: window.screenLeft || window.screenX,
            y: window.screenTop || window.screenY
        })`,
        returnByValue: true,
    };
    const { result } = await Runtime.evaluate(args);
    return result.value;
}
exports.getWindowPosition = getWindowPosition;
//# sourceMappingURL=data:application/json;base64,
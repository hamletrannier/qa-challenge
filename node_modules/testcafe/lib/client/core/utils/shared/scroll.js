"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScrollableParents = exports.hasScroll = void 0;
const index_1 = __importDefault(require("./adapter/index"));
const axis_values_1 = __importDefault(require("../../../../shared/utils/values/axis-values"));
const SCROLLABLE_OVERFLOW_STYLE_RE = /auto|scroll/i;
const DEFAULT_IE_SCROLLABLE_OVERFLOW_STYLE_VALUE = 'visible';
function getScrollable(el) {
    const overflowX = index_1.default.style.get(el, 'overflowX');
    const overflowY = index_1.default.style.get(el, 'overflowY');
    let scrollableHorizontally = SCROLLABLE_OVERFLOW_STYLE_RE.test(overflowX);
    let scrollableVertically = SCROLLABLE_OVERFLOW_STYLE_RE.test(overflowY);
    // IE11 and MS Edge bug: There are two properties: overflow-x and overflow-y.
    // If one property is set so that the browser may show scrollbars (`auto` or `scroll`) and the second one is set to 'visible',
    // then the second one will work as if it had the 'auto' value.
    if (index_1.default.browser.isIE) {
        scrollableHorizontally = scrollableHorizontally || scrollableVertically && overflowX === DEFAULT_IE_SCROLLABLE_OVERFLOW_STYLE_VALUE;
        scrollableVertically = scrollableVertically || scrollableHorizontally && overflowY === DEFAULT_IE_SCROLLABLE_OVERFLOW_STYLE_VALUE;
    }
    return new axis_values_1.default(scrollableHorizontally, scrollableVertically);
}
function hasBodyScroll(el) {
    const overflowX = index_1.default.style.get(el, 'overflowX');
    const overflowY = index_1.default.style.get(el, 'overflowY');
    const scrollableHorizontally = SCROLLABLE_OVERFLOW_STYLE_RE.test(overflowX);
    const scrollableVertically = SCROLLABLE_OVERFLOW_STYLE_RE.test(overflowY);
    const documentElement = index_1.default.dom.findDocument(el).documentElement;
    let bodyScrollHeight = el.scrollHeight;
    if (index_1.default.browser.isChrome || index_1.default.browser.isFirefox) {
        const { top: bodyTop } = el.getBoundingClientRect();
        const { top: documentTop } = documentElement.getBoundingClientRect();
        bodyScrollHeight = bodyScrollHeight - documentTop + bodyTop;
    }
    return (scrollableHorizontally || scrollableVertically) &&
        bodyScrollHeight > documentElement.scrollHeight;
}
function hasHTMLElementScroll(el) {
    const overflowX = index_1.default.style.get(el, 'overflowX');
    const overflowY = index_1.default.style.get(el, 'overflowY');
    //T303226
    if (overflowX === 'hidden' && overflowY === 'hidden')
        return false;
    const hasHorizontalScroll = el.scrollHeight > el.clientHeight;
    const hasVerticalScroll = el.scrollWidth > el.clientWidth;
    if (hasHorizontalScroll || hasVerticalScroll)
        return true;
    //T174562 - wrong scrolling in iframes without src and others iframes
    const body = el.getElementsByTagName('body')[0];
    if (!body)
        return false;
    if (hasBodyScroll(body))
        return false;
    const clientWidth = Math.min(el.clientWidth, body.clientWidth);
    const clientHeight = Math.min(el.clientHeight, body.clientHeight);
    return body.scrollHeight > clientHeight || body.scrollWidth > clientWidth;
}
function hasScroll(el) {
    if (index_1.default.dom.isBodyElement(el))
        return hasBodyScroll(el);
    if (index_1.default.dom.isHtmlElement(el))
        return hasHTMLElementScroll(el);
    const scrollable = getScrollable(el);
    if (!scrollable.x && !scrollable.y)
        return false;
    const hasVerticalScroll = scrollable.y && el.scrollHeight > el.clientHeight;
    const hasHorizontalScroll = scrollable.x && el.scrollWidth > el.clientWidth;
    return hasHorizontalScroll || hasVerticalScroll;
}
exports.hasScroll = hasScroll;
function getScrollableParents(element) {
    const parentsArray = index_1.default.dom.getParents(element);
    if (index_1.default.dom.isElementInIframe(element)) {
        const iframe = index_1.default.dom.getIframeByElement(element);
        if (iframe) {
            const iFrameParents = index_1.default.dom.getParents(iframe);
            parentsArray.concat(iFrameParents);
        }
    }
    return index_1.default.nativeMethods.arrayFilter.call(parentsArray, hasScroll);
}
exports.getScrollableParents = getScrollableParents;
//# sourceMappingURL=data:application/json;base64,
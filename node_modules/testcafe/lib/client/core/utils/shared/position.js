"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calcRelativePosition = exports.getElementFromPoint = exports.getClientDimensions = void 0;
const index_1 = __importDefault(require("./adapter/index"));
const boundary_values_1 = __importDefault(require("../../../../shared/utils/values/boundary-values"));
const dimensions_1 = __importDefault(require("../../../../shared/utils/values/dimensions"));
const axis_values_1 = __importDefault(require("../../../../shared/utils/values/axis-values"));
function getClientDimensions(target) {
    const isHtmlElement = index_1.default.dom.isHtmlElement(target);
    const body = isHtmlElement ? target.getElementsByTagName('body')[0] : null;
    const elementRect = target.getBoundingClientRect();
    const elBorders = boundary_values_1.default.create(index_1.default.style.getBordersWidth(target));
    const elScroll = index_1.default.style.getElementScroll(target);
    const isElementInIframe = index_1.default.dom.isElementInIframe(target);
    const isCompatMode = target.ownerDocument.compatMode === 'BackCompat';
    const elPosition = isHtmlElement ? new axis_values_1.default(0, 0) : axis_values_1.default.create(elementRect);
    let elHeight = elementRect.height;
    let elWidth = elementRect.width;
    if (isHtmlElement) {
        if (body && isCompatMode) {
            elHeight = body.clientHeight;
            elWidth = body.clientWidth;
        }
        else {
            elHeight = target.clientHeight;
            elWidth = target.clientWidth;
        }
    }
    if (isElementInIframe) {
        const iframeElement = index_1.default.dom.getIframeByElement(target);
        if (iframeElement) {
            const iframeOffset = index_1.default.position.getOffsetPosition(iframeElement);
            const clientOffset = index_1.default.position.offsetToClientCoords(axis_values_1.default.create(iframeOffset));
            const iframeBorders = index_1.default.style.getBordersWidth(iframeElement);
            elPosition.add(clientOffset).add(axis_values_1.default.create(iframeBorders));
            if (isHtmlElement)
                elBorders.add(iframeBorders);
        }
    }
    const hasRightScrollbar = !isHtmlElement && index_1.default.style.getInnerWidth(target) !== target.clientWidth;
    const hasBottomScrollbar = !isHtmlElement && index_1.default.style.getInnerHeight(target) !== target.clientHeight;
    const scrollbar = {
        right: hasRightScrollbar ? index_1.default.dom.getScrollbarSize() : 0,
        bottom: hasBottomScrollbar ? index_1.default.dom.getScrollbarSize() : 0,
    };
    return new dimensions_1.default(elWidth, elHeight, elPosition, elBorders, elScroll, scrollbar);
}
exports.getClientDimensions = getClientDimensions;
function getElementFromPoint(x, y) {
    // @ts-ignore
    const ieFn = document.getElementFromPoint;
    const func = ieFn || document.elementFromPoint;
    let el = null;
    try {
        // Permission denied to access property 'getElementFromPoint' error in iframe
        el = func.call(document, x, y);
    }
    catch (_a) {
        return null;
    }
    //NOTE: elementFromPoint returns null when is's a border of an iframe
    if (el === null)
        el = func.call(document, x - 1, y - 1);
    while (el && el.shadowRoot && el.shadowRoot.elementFromPoint) {
        const shadowEl = el.shadowRoot.elementFromPoint(x, y);
        if (!shadowEl || el === shadowEl)
            break;
        el = shadowEl;
    }
    return el;
}
exports.getElementFromPoint = getElementFromPoint;
function calcRelativePosition(dimensions, toDimensions) {
    const pos = boundary_values_1.default.create({
        top: dimensions.top - toDimensions.top,
        left: dimensions.left - toDimensions.left,
        right: toDimensions.right - dimensions.right,
        bottom: toDimensions.bottom - dimensions.bottom,
    });
    return pos.sub(toDimensions.border).sub(toDimensions.scrollbar).round(Math.ceil, Math.floor);
}
exports.calcRelativePosition = calcRelativePosition;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../../adapter");
const next_tick_1 = __importDefault(require("../../utils/next-tick"));
const settings_1 = __importDefault(require("./settings"));
const options_1 = require("../../../test-run/commands/options");
const last_hovered_element_holder_1 = __importDefault(require("./last-hovered-element-holder"));
const MOVE_REQUEST_CMD = 'automation|move|request';
const MOVE_RESPONSE_CMD = 'automation|move|response';
const get_automation_point_1 = __importDefault(require("../utils/get-automation-point"));
const axis_values_1 = __importDefault(require("../../utils/values/axis-values"));
const promise_1 = require("../../utils/promise");
const get_device_point_1 = __importDefault(require("../utils/get-device-point"));
class MoveAutomation {
    constructor(el, offset, win, cursor, moveOptions) {
        this.touchMode = adapter_1.adapter.featureDetection.isTouchDevice;
        this.moveEvent = this.touchMode ? 'touchmove' : 'mousemove';
        this.automationSettings = new settings_1.default(moveOptions.speed);
        this.cursorSpeed = this._getCursorSpeed();
        this.element = el;
        this.window = win;
        this.offset = offset;
        this.cursor = cursor;
        this.minMovingTime = moveOptions.minMovingTime || 0;
        this.modifiers = moveOptions.modifiers || {};
        this.skipScrolling = moveOptions.skipScrolling;
        this.skipDefaultDragBehavior = moveOptions.skipDefaultDragBehavior;
        this.speed = moveOptions.speed;
        this.firstMovingStepOccured = false;
    }
    static async create(el, win, cursor, moveOptions) {
        const { element, offset } = await MoveAutomation.getTarget(el, win, new axis_values_1.default(moveOptions.offsetX, moveOptions.offsetY));
        return new MoveAutomation(element, offset, win, cursor, moveOptions);
    }
    static getTarget(element, window, offset) {
        // NOTE: if the target point (considering offsets) is out of
        // the element change the target element to the document element
        return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.position.containsOffset(element, offset.x, offset.y))
            .then(containsOffset => {
            if (!containsOffset) {
                return Promise.all([
                    get_automation_point_1.default(element, offset),
                    adapter_1.adapter.dom.getDocumentElement(window),
                ])
                    .then(([point, docEl]) => ({ element: docEl, offset: point }));
            }
            return { element, offset };
        });
    }
    _getCursorSpeed() {
        return this.automationSettings.cursorSpeed;
    }
    _getTargetClientPoint() {
        return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.style.getElementScroll(this.element))
            .then(scroll => {
            if (adapter_1.adapter.dom.isHtmlElement(this.element))
                return axis_values_1.default.create(this.offset).sub(axis_values_1.default.create(scroll));
            return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.position.getClientPosition(this.element))
                .then(clientPosition => {
                const isDocumentBody = adapter_1.adapter.dom.isBodyElement(this.element);
                const clientPoint = axis_values_1.default.create(clientPosition).add(this.offset);
                if (!isDocumentBody)
                    clientPoint.sub(axis_values_1.default.create(scroll));
                return clientPoint.round(Math.floor);
            });
        });
    }
    _getEventSequenceOptions(currPosition) {
        const button = adapter_1.adapter.event.BUTTONS_PARAMETER.noButton;
        return get_device_point_1.default(currPosition)
            .then(devicePoint => {
            const eventOptions = {
                clientX: currPosition.x,
                clientY: currPosition.y,
                screenX: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.x,
                screenY: devicePoint === null || devicePoint === void 0 ? void 0 : devicePoint.y,
                buttons: button,
                ctrl: this.modifiers.ctrl,
                alt: this.modifiers.alt,
                shift: this.modifiers.shift,
                meta: this.modifiers.meta,
            };
            return { eventOptions, eventSequenceOptions: { moveEvent: this.moveEvent } };
        });
    }
    async _runEventSequence(currentElement, { eventOptions, eventSequenceOptions }) {
        const eventSequence = await adapter_1.adapter.createEventSequence(false, this.firstMovingStepOccured, eventSequenceOptions);
        return eventSequence.run(currentElement, last_hovered_element_holder_1.default.get(), eventOptions, null, null);
    }
    _emulateEvents(currentElement, currPosition) {
        return this._getEventSequenceOptions(currPosition)
            .then(options => {
            return this._runEventSequence(currentElement, options);
        })
            .then(() => {
            this.firstMovingStepOccured = true;
            last_hovered_element_holder_1.default.set(currentElement);
        });
    }
    _movingStep(currPosition) {
        return this.cursor.move(currPosition)
            .then(() => adapter_1.adapter.getElementExceptUI(this.cursor.getPosition()))
            // NOTE: in touch mode, events are simulated for the element for which mousedown was simulated (GH-372)
            .then(topElement => {
            const currentElement = this._getCorrectedTopElement(topElement);
            // NOTE: it can be null in IE
            if (!currentElement)
                return null;
            return this._emulateEvents(currentElement, currPosition);
        })
            .then(next_tick_1.default);
    }
    _getCorrectedTopElement(topElement) {
        return topElement;
    }
    _move(endPoint) {
        const startPoint = this.cursor.getPosition();
        const distance = axis_values_1.default.create(endPoint).sub(startPoint);
        const startTime = adapter_1.adapter.nativeMethods.dateNow();
        const movingTime = Math.max(Math.max(Math.abs(distance.x), Math.abs(distance.y)) / this.cursorSpeed, this.minMovingTime);
        let currPosition = axis_values_1.default.create(startPoint);
        let isFirstStep = true;
        return promise_1.whilst(() => !currPosition.eql(endPoint), () => {
            if (this._needMoveCursorImmediately())
                currPosition = axis_values_1.default.create(endPoint);
            else if (isFirstStep) {
                isFirstStep = false;
                // NOTE: the mousemove event can't be simulated at the point where the cursor
                // was located at the start. Therefore, we add a minimal distance 1 px.
                currPosition.add({
                    x: distance.x > 0 ? 1 : -1,
                    y: distance.y > 0 ? 1 : -1,
                });
            }
            else {
                const progress = Math.min((adapter_1.adapter.nativeMethods.dateNow() - startTime) / movingTime, 1);
                currPosition = axis_values_1.default.create(distance).mul(progress).add(startPoint).round(Math.floor);
            }
            return this._movingStep(currPosition);
        });
    }
    //
    _needMoveCursorImmediately() {
        return this.touchMode;
    }
    _scroll() {
        if (this.skipScrolling)
            return adapter_1.adapter.PromiseCtor.resolve(false);
        const scrollOptions = new options_1.ScrollOptions({ offsetX: this.offset.x, offsetY: this.offset.y }, false);
        return adapter_1.adapter.scroll(this.element, scrollOptions);
    }
    _moveToCurrentFrame(endPoint) {
        if (this.cursor.isActive(this.window))
            return adapter_1.adapter.PromiseCtor.resolve();
        const { x, y } = this.cursor.getPosition();
        const activeWindow = this.cursor.getActiveWindow(this.window);
        let iframe = null;
        let iframeUnderCursor = null;
        const msg = {
            cmd: MOVE_REQUEST_CMD,
            startX: x,
            startY: y,
            endX: endPoint.x,
            endY: endPoint.y,
            modifiers: this.modifiers,
            speed: this.speed,
        };
        return adapter_1.adapter.PromiseCtor.resolve()
            .then(() => {
            if (activeWindow.parent === this.window) {
                return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.dom.findIframeByWindow(activeWindow))
                    .then(frame => {
                    iframe = frame;
                    return adapter_1.adapter.PromiseCtor.resolve(adapter_1.adapter.position.getIframeClientCoordinates(frame))
                        .then(rect => {
                        msg.left = rect.left;
                        msg.top = rect.top;
                        msg.right = rect.right;
                        msg.bottom = rect.bottom;
                    });
                });
            }
            return void 0;
        })
            .then(() => {
            return adapter_1.adapter.getElementExceptUI(this.cursor.getPosition());
        })
            .then(topElement => {
            iframeUnderCursor = topElement === iframe;
            if (activeWindow.parent === this.window)
                msg.iframeUnderCursor = iframeUnderCursor;
            return adapter_1.adapter.sendRequestToFrame(msg, MOVE_RESPONSE_CMD, activeWindow);
        })
            .then(message => {
            this.cursor.setActiveWindow(this.window);
            if (iframeUnderCursor || adapter_1.adapter.dom.isIframeWindow(this.window))
                return this.cursor.move(message);
            return void 0;
        });
    }
    run() {
        return this._scroll()
            .then(() => Promise.all([
            this._getTargetClientPoint(),
            adapter_1.adapter.style.getWindowDimensions(this.window),
        ]))
            .then(([endPoint, boundary]) => {
            if (!boundary.contains(endPoint))
                return void 0;
            return this._moveToCurrentFrame(endPoint)
                .then(() => this._move(endPoint));
        });
    }
}
exports.default = MoveAutomation;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,
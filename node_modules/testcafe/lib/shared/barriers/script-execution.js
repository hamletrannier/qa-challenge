"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const delay_1 = __importDefault(require("../utils/delay"));
const WAIT_FOR_NEW_SCRIPTS_DELAY = 25;
class ScriptExecutionBarrier {
    constructor(emitter) {
        this._emitter = emitter;
        this._watchdog = null;
        this._waitResolve = null;
        this._scripts = new Map();
        this._startListening();
    }
    _startListening() {
        this._emitter.onScriptAdded((script) => this._onScriptElementAdded(script));
        this._emitter.onScriptLoadedOrFailed((script) => this._onScriptLoadedOrFailed(script));
    }
    _offListening() {
        this._emitter.offAll();
    }
    _onScriptElementAdded(script) {
        const setTimeout = adapter_1.adapter.nativeMethods.setTimeout;
        const timeoutFn = () => this._onScriptLoadedOrFailed(script, true);
        const loadingTimeout = setTimeout(timeoutFn, ScriptExecutionBarrier.LOADING_TIMEOUT);
        this._scripts.set(script, loadingTimeout);
    }
    _onScriptLoadedOrFailed(script, isTimeout = false) {
        if (!this._scripts.has(script))
            return;
        if (!isTimeout) {
            const clearTimeout = adapter_1.adapter.nativeMethods.clearTimeout;
            clearTimeout(this._scripts.get(script));
        }
        this._scripts.delete(script);
        if (this._scripts.size)
            return;
        delay_1.default(WAIT_FOR_NEW_SCRIPTS_DELAY)
            .then(() => {
            if (this._waitResolve && !this._scripts.size)
                this._finishWaiting();
        });
    }
    _finishWaiting() {
        if (this._watchdog) {
            const clearTimeout = adapter_1.adapter.nativeMethods.clearTimeout;
            clearTimeout(this._watchdog);
            this._watchdog = null;
        }
        this._scripts.clear();
        this._offListening();
        this._waitResolve(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
        this._waitResolve = null;
    }
    wait() {
        return new adapter_1.adapter.PromiseCtor((resolve) => {
            this._waitResolve = resolve;
            if (!this._scripts.size) {
                this._finishWaiting();
                return;
            }
            const setTimeout = adapter_1.adapter.nativeMethods.setTimeout;
            this._watchdog = setTimeout(() => this._finishWaiting(), ScriptExecutionBarrier.TIMEOUT);
        });
    }
}
exports.default = ScriptExecutionBarrier;
ScriptExecutionBarrier.TIMEOUT = 3000;
ScriptExecutionBarrier.LOADING_TIMEOUT = 2000;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFyZWQvYmFycmllcnMvc2NyaXB0LWV4ZWN1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUFxQztBQUNyQywyREFBbUM7QUFNbkMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFFdEMsTUFBcUIsc0JBQXNCO0lBU3ZDLFlBQW9CLE9BQWtDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQU8sT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQU0sSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLGVBQWU7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTyxhQUFhO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLHFCQUFxQixDQUFFLE1BQVM7UUFDcEMsTUFBTSxVQUFVLEdBQU8saUJBQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQ3hELE1BQU0sU0FBUyxHQUFRLEdBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUUsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVyRixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLHVCQUF1QixDQUFFLE1BQVMsRUFBRSxZQUFxQixLQUFLO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDMUIsT0FBTztRQUVYLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixNQUFNLFlBQVksR0FBRyxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7WUFFeEQsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBaUIsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFN0IsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7WUFDbEIsT0FBTztRQUVYLGVBQUssQ0FBQywwQkFBMEIsQ0FBQzthQUM1QixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUN4QyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU8sY0FBYztRQUNsQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsTUFBTSxZQUFZLEdBQUcsaUJBQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBRXhELFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBYSxFQUFFLENBQUMsQ0FBQywrREFBK0Q7UUFFckYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVNLElBQUk7UUFDUCxPQUFPLElBQUksaUJBQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFtQixFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7WUFFNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO2dCQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBRXRCLE9BQU87YUFDVjtZQUVELE1BQU0sVUFBVSxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztZQUVwRCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0YsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQXZGTCx5Q0F3RkM7QUF2RjJCLDhCQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ2Ysc0NBQWUsR0FBRyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlcic7XG5pbXBvcnQgZGVsYXkgZnJvbSAnLi4vdXRpbHMvZGVsYXknO1xuaW1wb3J0IHsgU2NyaXB0RXhlY3V0aW9uRW1pdHRlciwgTmF0aXZlTWV0aG9kcyB9IGZyb20gJy4uL3R5cGVzJztcblxuXG50eXBlIFRpbWVvdXRMYWJlbCA9IFJldHVyblR5cGU8TmF0aXZlTWV0aG9kc1snc2V0VGltZW91dCddPjtcblxuY29uc3QgV0FJVF9GT1JfTkVXX1NDUklQVFNfREVMQVkgPSAyNTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NyaXB0RXhlY3V0aW9uQmFycmllcjxTPiB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVElNRU9VVCA9IDMwMDA7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTE9BRElOR19USU1FT1VUID0gMjAwMDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VtaXR0ZXI6IFNjcmlwdEV4ZWN1dGlvbkVtaXR0ZXI8Uz47XG4gICAgcHJpdmF0ZSBfd2FpdFJlc29sdmU6ICgoKSA9PiB2b2lkKSB8IG51bGw7XG4gICAgcHJpdmF0ZSBfd2F0Y2hkb2c6IFRpbWVvdXRMYWJlbCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfc2NyaXB0czogTWFwPFMsIFRpbWVvdXRMYWJlbD47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGVtaXR0ZXI6IFNjcmlwdEV4ZWN1dGlvbkVtaXR0ZXI8Uz4pIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlciAgICAgPSBlbWl0dGVyO1xuICAgICAgICB0aGlzLl93YXRjaGRvZyAgICA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dhaXRSZXNvbHZlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2NyaXB0cyAgICAgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgdGhpcy5fc3RhcnRMaXN0ZW5pbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9zdGFydExpc3RlbmluZyAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub25TY3JpcHRBZGRlZCgoc2NyaXB0OiBTKSA9PiB0aGlzLl9vblNjcmlwdEVsZW1lbnRBZGRlZChzY3JpcHQpKTtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5vblNjcmlwdExvYWRlZE9yRmFpbGVkKChzY3JpcHQ6IFMpID0+IHRoaXMuX29uU2NyaXB0TG9hZGVkT3JGYWlsZWQoc2NyaXB0KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb2ZmTGlzdGVuaW5nICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5vZmZBbGwoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9vblNjcmlwdEVsZW1lbnRBZGRlZCAoc2NyaXB0OiBTKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNldFRpbWVvdXQgICAgID0gYWRhcHRlci5uYXRpdmVNZXRob2RzLnNldFRpbWVvdXQ7XG4gICAgICAgIGNvbnN0IHRpbWVvdXRGbiAgICAgID0gKCk6IHZvaWQgPT4gdGhpcy5fb25TY3JpcHRMb2FkZWRPckZhaWxlZChzY3JpcHQsIHRydWUpO1xuICAgICAgICBjb25zdCBsb2FkaW5nVGltZW91dCA9IHNldFRpbWVvdXQodGltZW91dEZuLCBTY3JpcHRFeGVjdXRpb25CYXJyaWVyLkxPQURJTkdfVElNRU9VVCk7XG5cbiAgICAgICAgdGhpcy5fc2NyaXB0cy5zZXQoc2NyaXB0LCBsb2FkaW5nVGltZW91dCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfb25TY3JpcHRMb2FkZWRPckZhaWxlZCAoc2NyaXB0OiBTLCBpc1RpbWVvdXQ6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX3NjcmlwdHMuaGFzKHNjcmlwdCkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaWYgKCFpc1RpbWVvdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFyVGltZW91dCA9IGFkYXB0ZXIubmF0aXZlTWV0aG9kcy5jbGVhclRpbWVvdXQ7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zY3JpcHRzLmdldChzY3JpcHQpIGFzIFRpbWVvdXRMYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zY3JpcHRzLmRlbGV0ZShzY3JpcHQpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zY3JpcHRzLnNpemUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZGVsYXkoV0FJVF9GT1JfTkVXX1NDUklQVFNfREVMQVkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dhaXRSZXNvbHZlICYmICF0aGlzLl9zY3JpcHRzLnNpemUpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaFdhaXRpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2ZpbmlzaFdhaXRpbmcgKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fd2F0Y2hkb2cpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFyVGltZW91dCA9IGFkYXB0ZXIubmF0aXZlTWV0aG9kcy5jbGVhclRpbWVvdXQ7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl93YXRjaGRvZyk7XG5cbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZG9nID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NjcmlwdHMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fb2ZmTGlzdGVuaW5nKCk7XG4gICAgICAgIHRoaXMuX3dhaXRSZXNvbHZlISgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cblxuICAgICAgICB0aGlzLl93YWl0UmVzb2x2ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIHdhaXQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IGFkYXB0ZXIuUHJvbWlzZUN0b3IoKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3dhaXRSZXNvbHZlID0gcmVzb2x2ZTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zY3JpcHRzLnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hXYWl0aW5nKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNldFRpbWVvdXQgPSBhZGFwdGVyLm5hdGl2ZU1ldGhvZHMuc2V0VGltZW91dDtcblxuICAgICAgICAgICAgdGhpcy5fd2F0Y2hkb2cgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2ZpbmlzaFdhaXRpbmcoKSwgU2NyaXB0RXhlY3V0aW9uQmFycmllci5USU1FT1VUKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19